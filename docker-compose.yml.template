version: "3.7"

services:
  php5:
    container_name: php5
    build:
      context: ./bin
      dockerfile: Dockerfile-php5
      args:
        user_uid: "$user_uid"
        user_gid: "$user_gid"
    restart: 'always'
    ports:
      - 5555:80
      - 5543:443
    networks:
      - custom_docker_network
    volumes:
      - ./www:/var/www/
      - ./data/xdebug_profiler/:/var/xdebug_profiler/
      - ./bin/config/php/php.ini:/usr/local/etc/php/conf.d/custom-php.ini
      - ./bin/config/apache_vhosts/:/etc/apache2/sites-enabled
      - ./bin/config/apache_ports/ports.conf:/etc/apache2/ports.conf
      - ./logs/apache2:/var/log/apache2
      - ./logs/msmtp/:/var/log/msmtp/
      - ./logs/php/:/var/log/php/
      - ./bin/config/msmtp/.msmtp_php:/etc/.msmtp_php_original
    environment:
      XDEBUG_CONFIG: "remote_host=$REMOTE_HOST_IP"
      PHP_IDE_CONFIG: "serverName=myapp"
  php7:
    container_name: php7
    build:
      context: ./bin
      dockerfile: Dockerfile-php7
      args:
        user_uid: "$user_uid"
        user_gid: "$user_gid"
    restart: 'always'
    networks:
      - custom_docker_network
    ports:
      - 7777:80 
      - 7743:443
    volumes:
      - ./www:/var/www/
      - ./data/xdebug_profiler/:/var/xdebug_profiler/
      - ./bin/config/php/php.ini:/usr/local/etc/php/conf.d/custom-php.ini
      - ./bin/config/apache_vhosts/:/etc/apache2/sites-enabled
      - ./logs/apache2:/var/log/apache2
      - ./bin/config/apache_ports/ports.conf:/etc/apache2/ports.conf
      - ./logs/msmtp/:/var/log/msmtp/
      - ./logs/php/:/var/log/php/
      - ./bin/config/msmtp/.msmtp_php:/etc/.msmtp_php_original
    environment:
      XDEBUG_CONFIG: "remote_host=$REMOTE_HOST_IP"
      PHP_IDE_CONFIG: "serverName=myapp"
  node:
    container_name: node
    image: node:10
    restart: 'always'
    stdin_open: true
    tty: true
    networks:
      - custom_docker_network
    ports:
      - 3001:3000 
    volumes:
      - ~/WebstormProjects:/usr/src/app
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    networks:
      - custom_docker_network
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "root"
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MYSQL_ROOT_PASSWORD}
  mongo:
    container_name: mongo
    build:
      context: ./bin
      dockerfile: Dockerfile-mongo
      args:
        user_uid: "$user_uid"
        user_gid: "$user_gid"
    restart: 'always'
    networks:
      - custom_docker_network
    ports:
      - 27017:27017
    volumes:
      - ./data/mongo:/data/db
      - ./logs/mongo:/var/log/mongodb/
      - ./bin/mongo/mongo.conf:/etc/mongod.conf
    environment:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: "maindb"
  mariadb:
    container_name: mariadb
    build:
      context: ./bin
      dockerfile: Dockerfile-mariadb
      args:
        user_uid: "$user_uid"
        user_gid: "$user_gid"
    restart: 'always'
    networks:
      - custom_docker_network
    ports:
      - 3307:3306
    volumes:
      - ./data/mariadb:/var/lib/mysql
      - ./logs/mariadb:/var/log/mysql
      - ./bin/config/mariadb:/etc/mysql/conf.d 
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: "maindb"
  adminer:
    container_name: 'adminer' 
    networks:
      - custom_docker_network
    image: adminer
    volumes:
      - ./bin/config/php/upload_large_dumps.ini:/usr/local/etc/php/conf.d/upload_large_dumps.ini
    restart: always
    ports:
      - 8082:8080
  postgres:
    container_name: postgres
    build:
      context: ./bin
      dockerfile: Dockerfile-postgres
      args:
        user_uid: "$user_uid"
        user_gid: "$user_gid"
    restart: 'always'
    networks:
      - custom_docker_network
    ports:
      - 5432:5432
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgres
    environment:
      POSTGRES_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      POSTGRES_DB: "maindb"
      PGDATA: /var/lib/postgresql/data/pgdata
  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: mysql-exporter
    restart: 'always'
    networks:
      - custom_docker_network
    environment:
    - DATA_SOURCE_NAME=${MYSQL_USER_EXPORTER}:${MYSQL_PASSWORD_EXPORTER}@(mysql:3306)/
    - collect.info_schema.tablestats=true
    - collect.info_schema.userstats=true
    - collect.info_schema.query_response_time=true
    - collect.auto_increment.columns=true
    - collect.binlog_size=true
    - collect.engine_tokudb_status=true
    - collect.perf_schema.eventsstatements=true
    - collect.perf_schema.eventswaits=true
    - collect.perf_schema.file_events=true
    - collect.perf_schema.indexiowaits=true
    - collect.perf_schema.tableiowaits=true
    - collect.perf_schema.tablelocks=true
    ports:
      - 9104:9104
    logging:
        driver: "json-file"
        options:
          max-size: "5m"
  grafana:
    container_name: grafana
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./data/grafana/:/var/lib/grafana
      - ./bin/config/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - custom_docker_network
    restart: always
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    depends_on:
      - cadvisor
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    ports:
      - 9090:9090
    networks:
      - custom_docker_network
    volumes:
      - ./bin/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./data/alertmanager/:/etc/alertmanager/
    networks:
      - custom_docker_network
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
  cadvisor:
    container_name: cadvisor
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - custom_docker_network
    restart: always
  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - custom_docker_network
    restart: always
  mysql:
    container_name: mysql
    build:
      context: ./bin
      dockerfile: Dockerfile-mysql
      args:
        user_uid: "$user_uid"
        user_gid: "$user_gid"
    restart: 'always'
    networks:
      - custom_docker_network
    ports:
      - 3306:3306
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./logs/mysql:/var/log/mysql
      - ./bin/config/mysql:/etc/mysql/conf.d 
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: "maindb"
  php7-fpm:
    container_name: php7-fpm
    build:
      context: ./bin
      dockerfile: Dockerfile-php7-fpm
      args:
        user_uid: "$user_uid"
        user_gid: "$user_gid"
    restart: 'always'
    networks:
      - custom_docker_network
    volumes:
      - ./www:/var/www/
      - ./data/xdebug_profiler/:/var/xdebug_profiler/
      - ./bin/config/php/php-fpm.ini:/usr/local/etc/php/conf.d/custom-php.ini
      - ./logs/msmtp/:/var/log/msmtp/
      - ./logs/php/:/var/log/php/
      - ./bin/config/msmtp/.msmtp_php:/etc/.msmtp_php_original
    environment:
      XDEBUG_CONFIG: "remote_host=$REMOTE_HOST_IP"
      PHP_IDE_CONFIG: "serverName=myapp"
  nginx:
    container_name: nginx
    restart: 'always'
    networks:
      - custom_docker_network
    build:
      context: ./bin
      dockerfile: Dockerfile-nginx
    volumes:
      - ./www:/var/www/
      - ./bin/config/nginx_vhosts/:/etc/nginx/conf.d/
      - ./logs/nginx/:/var/log/nginx/
    ports:
      - 80:80
      - 443:443

networks:
  custom_docker_network:
    name: backend_network
